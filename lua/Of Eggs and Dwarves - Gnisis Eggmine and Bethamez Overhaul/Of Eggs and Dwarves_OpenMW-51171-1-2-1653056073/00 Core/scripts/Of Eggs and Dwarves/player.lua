local ui = require('openmw.ui')
local core = require('openmw.core')
local camera = require('openmw.camera')
local util = require('openmw.util')

local active = false
local range = 1.0
local speed = 1.0

-- https://www.youtube.com/watch?v=4lCm_jqoBrI
local keys = {{-0.003631, 0.000344, -0.002932}, {0.000000, 0.000000, 0.000000}, {0.003630, -0.000355, 0.002931}, {0.005901, -0.004007, 0.002776}, {0.004899, -0.008947, -0.000217}, {0.001740, -0.012751, -0.004530}, {-0.001893, -0.014634, -0.008458}, {-0.006758, -0.014101, -0.010412}, {-0.012088, -0.010429, -0.010400}, {-0.014730, -0.004074, -0.008864}, {-0.013647, 0.001754, -0.006141}, {-0.009205, 0.003431, -0.003665}, {-0.004117, 0.002210, -0.001947}, {-0.001060, -0.000340, -0.000661}, {-0.001243, -0.005010, -0.001036}, {-0.003038, -0.011250, -0.003134}, {-0.002273, -0.018633, -0.005130}, {0.001257, -0.024276, -0.006843}, {0.003089, -0.026024, -0.007829}, {0.001158, -0.024716, -0.007286}, {-0.001834, -0.021369, -0.006093}, {-0.002549, -0.017551, -0.004631}, {-0.001662, -0.012196, -0.001721}, {-0.000478, -0.005527, 0.003770}, {0.001098, 0.002148, 0.009708}, {0.003839, 0.008452, 0.014255}, {0.008085, 0.010870, 0.015541}, {0.011954, 0.010188, 0.014101}, {0.012609, 0.007542, 0.011614}, {0.010043, 0.002376, 0.008212}, {0.005102, -0.004389, 0.004453}, {-0.000892, -0.010846, 0.001959}, {-0.004079, -0.015339, 0.000287}, {-0.002769, -0.016773, -0.000110}, {0.000036, -0.016102, -0.000004}, {0.000617, -0.013242, 0.000273}, {-0.000448, -0.009126, 0.003272}, {-0.003229, -0.006926, 0.005829}, {-0.008389, -0.007523, 0.005368}, {-0.011858, -0.008613, 0.003048}, {-0.010768, -0.007771, 0.002849}, {-0.006234, -0.004514, 0.004854}, {-0.002742, -0.000413, 0.008314}, {-0.001623, 0.002315, 0.012435}, {-0.001303, 0.001541, 0.014423}, {-0.000824, -0.002338, 0.013488}, {-0.001118, -0.009755, 0.010202}, {-0.001941, -0.018101, 0.005140}, {-0.001953, -0.024504, 0.002285}, {-0.000368, -0.028484, 0.000266}, {0.001583, -0.028156, -0.002690}, {0.001814, -0.023105, -0.005167}, {0.000569, -0.017900, -0.006633}, {-0.002643, -0.017282, -0.007317}, {-0.006712, -0.020013, -0.006934}, {-0.007554, -0.023964, -0.006086}, {-0.003706, -0.027865, -0.005236}, {0.001612, -0.030274, -0.007513}, {0.003226, -0.028398, -0.008395}, {0.001660, -0.023137, -0.004792}, {-0.001151, -0.018565, -0.000082}, {-0.005970, -0.016186, 0.001287}, {-0.009069, -0.013079, 0.001420}, {-0.006641, -0.009046, 0.002492}, {-0.002389, -0.005069, 0.004303}, {-0.000769, 0.000060, 0.006114}, {-0.001858, 0.005245, 0.008395}, {-0.007052, 0.007771, 0.007105}, {-0.014319, 0.006907, 0.002187}, {-0.016641, 0.003327, -0.003055}, {-0.012120, -0.000642, -0.005318}, {-0.004892, -0.003490, -0.004370}, {0.000739, -0.006051, -0.003805}, {0.002262, -0.010785, -0.005359}, {0.001358, -0.017289, -0.007746}, {0.000403, -0.022254, -0.011054}, {0.001168, -0.023226, -0.012922}, {0.003718, -0.020409, -0.012644}, {0.005334, -0.016038, -0.010829}, {0.004848, -0.010852, -0.008287}, {0.005137, -0.005655, -0.005934}, {0.006897, -0.002369, -0.005170}, {0.007285, 0.000113, -0.006637}, {0.006004, 0.002529, -0.008142}, {0.004565, 0.002759, -0.009015}, {0.003094, 0.000740, -0.010082}, {0.002246, -0.002415, -0.011393}, {0.001942, -0.004278, -0.013861}, {0.001859, -0.003723, -0.016544}, {0.001308, -0.000672, -0.019479}, {-0.001419, 0.003888, -0.020982}, {-0.004179, 0.007970, -0.019643}, {-0.002092, 0.009256, -0.016359}, {0.002248, 0.006226, -0.015503}, {0.004355, 0.001193, -0.017054}, {0.003684, -0.003605, -0.018759}, {0.000305, -0.006414, -0.020333}, {-0.003592, -0.007850, -0.022106}, {-0.005021, -0.006982, -0.024395}, {-0.002559, -0.003013, -0.022739}, {0.002739, 0.002482, -0.017177}, {0.006845, 0.006400, -0.010967}, {0.005618, 0.005969, -0.006991}, {0.000170, 0.001375, -0.006974}, {-0.005742, -0.003439, -0.009811}, {-0.007775, -0.007599, -0.012154}, {-0.005307, -0.010674, -0.013738}, {-0.002782, -0.009495, -0.013481}, {-0.003979, -0.004550, -0.012434}, {-0.006334, 0.000616, -0.010963}, {-0.004686, 0.004907, -0.008352}, {-0.001448, 0.007616, -0.006001}, {-0.001378, 0.009257, -0.005139}, {-0.003596, 0.010875, -0.005446}, {-0.005809, 0.011833, -0.007317}, {-0.005574, 0.014674, -0.006358}, {-0.000943, 0.019964, -0.000794}, {0.005563, 0.024069, 0.006454}, {0.007807, 0.024337, 0.009726}, {0.005776, 0.022196, 0.008337}, {0.005226, 0.018387, 0.004604}, {0.006875, 0.014791, 0.001486}, {0.005829, 0.012672, -0.001392}, {0.000299, 0.011782, -0.004786}, {-0.003887, 0.011792, -0.006640}, {-0.004391, 0.011668, -0.005917}, {-0.003327, 0.012356, -0.004895}, {-0.002114, 0.014152, -0.003700}, {-0.002206, 0.014890, -0.002689}, {-0.005890, 0.013106, -0.003634}, {-0.010795, 0.010917, -0.004963}, {-0.011033, 0.008833, -0.005360}, {-0.007454, 0.007221, -0.004215}, {-0.004450, 0.007903, -0.001849}, {-0.002610, 0.010210, 0.001963}, {-0.002549, 0.011436, 0.004572}, {-0.004611, 0.010453, 0.004251}, {-0.006274, 0.006982, 0.002560}, {-0.005172, 0.002150, 0.001127}, {-0.002586, -0.001217, 0.000697}, {-0.000846, -0.002648, 0.001023}, {-0.001358, -0.002664, 0.000610}, {-0.003354, -0.001537, -0.000913}, {-0.00356, 0.00022, -0.00307}}
for i, key in ipairs(keys) do
    keys[i] = util.vector3(unpack(key))
end

local function lerp(f, a, b)
    return a * (1 - f) + b * f
end

return {
    eventHandlers = {
        slf_qk_animation = function(args)
            active = (args ~= nil)
            if active then
                speed, range = unpack(args)
            else
                camera.setExtraYaw(0)
                camera.setExtraPitch(0)
                camera.setRoll(0)
            end
        end
    },
    engineHandlers = {
        onUpdate = function()
            if not active then return end

            local t = core.getSimulationTime() * (60 * speed)
            local f = t % 1.0

            local currIdx = math.floor(t % 144)
            local nextIdx = (currIdx + 1) % 144

            local currKey = keys[currIdx + 1]
            local nextKey = keys[nextIdx + 1]

            local interp = lerp(f, currKey, nextKey)
            local scaled = interp * range

            camera.setExtraYaw(scaled.z)
            camera.setExtraPitch(scaled.y)
            camera.setRoll(scaled.x)
        end,
    }
}
