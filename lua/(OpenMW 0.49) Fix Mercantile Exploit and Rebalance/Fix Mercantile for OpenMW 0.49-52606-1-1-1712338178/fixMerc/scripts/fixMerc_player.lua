
local I = require('openmw.interfaces')
local types = require('openmw.types')
local self = require('openmw.self')
local Player = require('openmw.types').Player
local core = require('openmw.core')

-----------------
-- CONFIGURATION: (how many skill points do you get per 100g spent/gained? each skill level you need skillpoints equal to your skill level)
SKILL_POINTS_PER_100G = 1.5
BRIBE_MULTIPLIER = 3


temporary_gold_change=0
player_gold_old=nil
player_gold_old2=nil
current_vendor_npc=nil
lastBarterModeTime=0

I.SkillProgression.addSkillUsedHandler(function(skillid, params)
    if skillid == 'speechcraft' and params.skillGain > 0 then
		if player_gold_old2 - player_gold_old == 10 then
			temporary_gold_change = temporary_gold_change + 10*BRIBE_MULTIPLIER
		elseif player_gold_old2 - player_gold_old == 100 then
			temporary_gold_change = temporary_gold_change + 100*BRIBE_MULTIPLIER
		elseif player_gold_old2 - player_gold_old == 1000 then
			temporary_gold_change = temporary_gold_change + 1000*BRIBE_MULTIPLIER
		end
    end
end)

local function onFrame(deltaTime)
	if current_vendor_npc then
		if not I.UI.getMode() then
			current_vendor_npc = nil
			return
		end
		--for detecting bribe
		player_gold_old2 = player_gold_old
		local goldItem = types.Actor.inventory(self):find('gold_001')
		local goldAmount = goldItem and goldItem.count or 0
		--gold changes after barter mode is closed
		local now = core.getRealTime()
		if I.UI.getMode() == "Barter" then
			lastBarterModeTime = now
		end
		if not player_gold_old then
			player_gold_old = goldAmount
		elseif goldAmount ~= player_gold_old then
			if now - lastBarterModeTime < 0.1 then
				temporary_gold_change = temporary_gold_change + math.abs(goldAmount - player_gold_old)
			end
			player_gold_old = goldAmount
		end
		if temporary_gold_change >= 10 then
			local skillLevel = Player.stats.skills.mercantile(self).base
			--60% less exp at level 100
			local skillIncrease = math.max(0.01,(1-0.006*skillLevel)*SKILL_POINTS_PER_100G/100*temporary_gold_change)
			--print(skillIncrease)
			I.SkillProgression.skillUsed('mercantile', {skillGain=skillIncrease, useType = 1, scale = nil})
			temporary_gold_change = 0
		end
	end
end

local function FixMerc_NPCActivated (npc)
	if npc.recordId ~= "scamp_creeper" and npc.recordId ~= "mudcrab_unique" then
		current_vendor_npc = npc
	end

end


return {
	engineHandlers = { onFrame = onFrame },
	eventHandlers = { FixMerc_NPCActivated = FixMerc_NPCActivated }
}