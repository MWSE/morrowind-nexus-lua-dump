skills = { "Block",
"Armorer",
"Medium Armor",
"Heavy Armor",
"Blunt Weapon",
"Long Blade",
"Axe",
"Spear",
"Athletics",
"Enchant",
"Destruction",
"Alteration",
"Illusion",
"Conjuration",
"Mysticism",
"Restoration",
"Alchemy",
"Unarmored",
"Security",
"Sneak",
"Acrobatics",
"Light Armor",
"Short Blade",
"Marksman",
"Mercantile",
"Speechcraft",
"Hand-to-hand",
}

json = require "jsonStorage"
math.round=function(f)
	return math.floor(f+0.5)
end
-- Bitfield-Mapping
local bitfields = {
    [0x00001] = "Weapon",
    [0x00002] = "Armor",
    [0x00004] = "Clothing",
    [0x00008] = "Books",
    [0x00010] = "Ingrediant",
    [0x00020] = "Picks",
    [0x00040] = "Probes",
    [0x00080] = "Lights",
    [0x00100] = "Apparatus",
    [0x00200] = "Repair",
    [0x00400] = "Misc",
    [0x00800] = "Spells",
    [0x01000] = "Magic Items",
    [0x02000] = "Potions",
    [0x04000] = "Training",
    [0x08000] = "Spellmaking",
    [0x10000] = "Enchanting",
    [0x20000] = "Repair Item"
}

local function btest(value, bit)
    return value % (bit * 2) >= bit
end

function decodeBitfield(value)
    local result = {}
    for bit, name in pairs(bitfields) do
        if btest(value, bit) then
            table.insert(result, name)
        end
    end
    return result
end


local function canBarter(bitField)
	if not bitField then
		return false
	end
	local inputValue = bitField
	local decoded = decodeBitfield(inputValue)
	for _, category in ipairs(decoded) do
		--if category == "Weapon" or category == "Armor" or category == "Clothing" or category == "Books" or category == "Ingrediant" or category == "Picks" or category == "Probes" or category == "Lights" or category == "Apparatus" or category == "Repair" or category == "Misc"  or category == "Spells"  or category == "Magic Items"  or category == "Potions"  or category == "Training" then
		if category ~= "Spellmaking" and category ~= "Enchanting" and category ~= "Repair Item" then
			return true
		end
	end
	return false
end


attributes = {
"strength",
"intelligence",
"willpower",
"agility",
"speed",
"endurance",
"personality",
"luck",
}

path = "D:\\"
data = {
(path.."morrowind.json"),
(path.."tribunal.json"),
(path.."bloodmoon.json"),
(path.."tamriel_data.json"),
(path.."tr_mainland.json"),
(path.."tr_factions.json")
}

local i = 0
classes = {}
races = {}
npcs = {}
for _, path in pairs(data) do
	esp = json.loadTable(path)
	for a,b in pairs(esp) do
		if b.type:lower() == "race" then
			--print(b.id)
			races[b.id:lower()] = b
		end
		
		if b.type:lower() == "class" then
			--print(b.id)
			classes[b.id:lower()] = b
		end
		
		if b.type:lower() == "npc" and b.ai_data and b.ai_data.services and (tostring(b.ai_data.services):lower():find("barter") or tostring(b.ai_data.services):lower():find("training") or tostring(b.ai_data.services):lower():find("spells") or canBarter(tonumber(b.ai_data.services))) then
			--print(b.id)--.." "..b.ai_data.services)
			npcs[b.id] = b
		elseif b.ai_data then 
			--print((b.ai_data.services))
		end
	end
end
filteredNpcs = {}
for i, npc in pairs(npcs) do
	if npc.data.stats then
		filteredNpcs[i] = {
			personality = npc.data.stats.attributes[7], 
			luck = npc.data.stats.attributes[9], 
			speechcraft = npc.data.stats.skills[26],
			mercantile = npc.data.stats.skills[25]
		}
		speechcraft = npc.data.stats.skills[26]
		mercantile = npc.data.stats.skills[25]
		if speechcraft < 30 then
			speechcraft = (speechcraft + 25)/2
		end
		if mercantile < 30 then
			mercantile = (mercantile + 25)/2
		end
		print('["'..i:lower()..'"] = {'..math.round(speechcraft)..", "..math.round(mercantile).."},")
	else
		local class = classes[npc.class:lower()]
		local race = races[npc.race:lower()]
		local isFemale = false
		if not (type(npc.npc_flags) == "number") then
			--print(npc.npc_flags)
			isFemale = npc.npc_flags:lower():find("female")
		else
			isFemale = (npc.npc_flags % 2) == 1
		end
		if isFemale then --[2]
			personality = race.data.personality[2]
			luck = race.data.luck[2]
		else
			personality = race.data.personality[1]
			luck = race.data.luck[1]
		end
		local raceBonuses={
			{skill = race.data.skill_bonuses.skill_0, bonus = race.data.skill_bonuses.bonus_0},
			{skill = race.data.skill_bonuses.skill_1, bonus = race.data.skill_bonuses.bonus_1},
			{skill = race.data.skill_bonuses.skill_2, bonus = race.data.skill_bonuses.bonus_2},
			{skill = race.data.skill_bonuses.skill_3, bonus = race.data.skill_bonuses.bonus_3},
			{skill = race.data.skill_bonuses.skill_4, bonus = race.data.skill_bonuses.bonus_4},
			{skill = race.data.skill_bonuses.skill_5, bonus = race.data.skill_bonuses.bonus_5},
			{skill = race.data.skill_bonuses.skill_6, bonus = race.data.skill_bonuses.bonus_6},
			{skill = race.data.skill_bonuses.skill_7, bonus = race.data.skill_bonuses.bonus_7},
			{skill = race.data.skill_bonuses.skill_8, bonus = race.data.skill_bonuses.bonus_8},
		}
		speechcraft = 5
		mercantile = 5
		for a,b in pairs(raceBonuses) do
			--if not next(b) then
			--	raceBonuses[a] = nil
			--end
			if next(b) then
				if b.skill:lower() == "speechcraft" then
					speechcraft = speechcraft + b.bonus
				end
				if b.skill:lower() == "mercantile" then
					mercantile = mercantile + b.bonus
				end
			end
		end
		local major={
			class.data.major_1,
			class.data.major_2,
			class.data.major_3,
			class.data.major_4,
			class.data.major_5,
		}
		local minor={
			class.data.minor_1,
			class.data.minor_2,
			class.data.minor_3,
			class.data.minor_4,
			class.data.minor_5,
		}
		local speechcraftMultiplier = 0.1
		local mercantileMultiplier = 0.1
		if class.data.specialization:lower() == "stealth" then
			speechcraftMultiplier = 0.5
			mercantileMultiplier = 0.5
		end
		for a,b in pairs(major) do
			if b:lower() == "speechcraft" then
				speechcraftMultiplier = speechcraftMultiplier+0.5
			end
			if b:lower() == "mercantile" then
				mercantileMultiplier = mercantileMultiplier+0.5
			end
		end
		for a,b in pairs(minor) do
			if b:lower() == "speechcraft" then
				speechcraftMultiplier = speechcraftMultiplier+0.5
			end
			if b:lower() == "mercantile" then
				mercantileMultiplier = mercantileMultiplier+0.5
			end
		end
		speechcraft = speechcraft + (npc.data.level - 1) * speechcraftMultiplier
		mercantile = mercantile + (npc.data.level - 1) * mercantileMultiplier
		if speechcraft < 30 then
			speechcraft = (speechcraft + 25)/2
		end
		if mercantile < 30 then
			mercantile = (mercantile + 25)/2
		end
		print('["'..i:lower()..'"] = {'..math.round(speechcraft)..", "..math.round(mercantile).."},")
		
		
		--   Attributes depend on wether or not "Auto calculate stats" is checked for an NPC in the CS. If not, then the NPC's stats were predetermined. If yes, it is calculated with Attribute = Base Attribute + (Level - 1) * (Sum of Modifiers for every skill governed by Attribute)
		--	Where the modifiers are:
		--
		--		Major skill: 1
		--		Minor skill: 0.5
		--		Misc. skill: 0.2
		--
		--	So a level 6 Orc Warrior (Long Blade as a Major skill, Axe, Blunt weapon, Armorer as Minor and Acrobatics as Misc.) should have 55 + (6 - 1) * (1 + 0.5 + 0.5 + 0.5 + 0.2) = 68.5 Strength, Which is rounded down to 68. Values ending in .1 - .5 are rounded down, .6 - .9 are rounded up.
		-- screw this
		
		

	end
end