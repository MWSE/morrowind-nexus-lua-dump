-- Save to my_lua_mod/scripts/example/player.lua

-- remember that prices depend on your stamina
-- the mod makes sure that the vendor's rating is always at least 25 points above the player's, but since mercantile's contribution to this rating is capped at 100 points, you'd be able to exploit the system at 76 mercantile + 50 personality + 100 luck
local ONLY_FIX_EXPLOIT = false --set to true to not adjust the mercantile price curve and only prevent exploits by keeping vendor mercantile 25 points above your rating, in this case you can safely disable the easyBribe .omwaddon
local ATTRIBUTE_TARGET = 75
local SKILL_TARGET = 75
local TARGET_MULT = 0.52 -- TARGET_MULT=1 means that the npc will always have the maximum level. TARGET_MULT=0 means that the npc will always have *your* level (plus 25 points to make it non-exploitable)
local TOUCH_NON_VENDOR_NPCS = true -- since merchants now have such high mercantile, its harder to bribe them. the included esp increases bribe modifiers to 1.5x, but that would make other npcs too easily bribable. set to true to make sure that other npcs you talk to have at least 40 mercantile skill and 50 luck + personality


local types = require('openmw.types')
local self = require('openmw.self')


local function onActivated(actor)
	if not originalMercantile then
		originalMercantile = types.NPC.stats.skills.mercantile(self).base
	end	
	if not originalSpeechcraft then
		originalSpeechcraft = types.NPC.stats.skills.speechcraft(self).base
	end
end

local function restoreMercantile()
	print("fixMerc restoring mercantile "..types.NPC.stats.skills.mercantile(self).base.." -> "..originalMercantile)
	types.NPC.stats.skills.mercantile(self).base = originalMercantile
end

local function restoreSpeechcraft()
	print("fixMerc restoring speechcraft "..types.NPC.stats.skills.speechcraft(self).base.." -> "..originalSpeechcraft)
	types.NPC.stats.skills.speechcraft(self).base = originalSpeechcraft
end

local function setMercantile(value)
	print("fixMerc: setting mercantile "..types.NPC.stats.skills.mercantile(self).base.." -> "..value)
	types.NPC.stats.skills.mercantile(self).base = value
end

local function setSpeechcraft(value)
	print("fixMerc: setting speechcraft "..types.NPC.stats.skills.speechcraft(self).base.." -> "..value)
	types.NPC.stats.skills.speechcraft(self).base = value
end

local function setHardcoreMercantile(value)
	print("fixMerc: reverting hardcore mercantile "..types.NPC.stats.skills.mercantile(self).base.." -> "..value)
	types.NPC.stats.skills.mercantile(self).base = value
end

local function setHardcoreSpeechcraft(value)
	print("fixMerc: reverting hardcore speechcraft "..types.NPC.stats.skills.speechcraft(self).base.." -> "..value)
	types.NPC.stats.skills.speechcraft(self).base = value
end


local function modStats(player)	
	----[[
	local mercantile = types.NPC.stats.skills.mercantile
	local luck = types.NPC.stats.attributes.luck
	local personality = types.NPC.stats.attributes.personality
	local playerRating = mercantile(player).modified + 0.2*personality(player).modified + 0.1*luck(player).modified
	local targetRating = math.min(ATTRIBUTE_TARGET,50)*0.2 + math.min(ATTRIBUTE_TARGET,100)*0.1 + SKILL_TARGET +26
	local merchantBase = 0.2*personality(self).modified + 0.1*luck(self).modified + mercantile(self).modified
	local calculatedRating = math.max(playerRating+26,(playerRating*(1-TARGET_MULT) + targetRating*TARGET_MULT)) -- always needs to be ~25 above player rating
	if ONLY_FIX_EXPLOIT then
		calculatedRating = math.max(playerRating+26, merchantBase)
	end
	if calculatedRating > 109 then --only up to 100 mercantile contribute to the BASE offer, but i assume barely any npc has less than 30 in his attributes so we get another 9 points headroom before we have to mess with their attributes
		if personality(self).modified < 50 then
			--personality(self).base = math.max(math.min(personality(self).base,70),30,personality(self).base+50-personality(self).modified)
		end
		if luck(self).modified <100 then
			--luck(self).base = math.max(30,luck(self).base+100-luck(self).modified)
		end
	end
	merchantBase = 0.2*personality(self).modified + 0.1*luck(self).modified + mercantile(self).modified
	
	print("fixMerc starting trade: mod mercantile "..mercantile(self).base.." -> "..math.max(0,math.floor(mercantile(self).base+calculatedRating-merchantBase)))
	local newRating = math.max(0,math.floor(mercantile(self).base+calculatedRating-merchantBase))
	types.NPC.stats.skills.mercantile(self).base = newRating
	types.NPC.stats.skills.speechcraft(self).base = newRating
	-- ]]--
end

-- int MechanicsManager::getBarterOffer
-- bool Trading::haggle
local function onLoad(data)
	if data then
		originalMercantile = data.originalMercantile --or {}
		originalSpeechcraft = data.originalSpeechcraft --or {}
	--else
	--	originalMercantile = {}
	end
end

local function onSave()
    return {
        originalMercantile = originalMercantile,
        originalSpeechcraft = originalSpeechcraft
    }
end

local function bye()
	restoreMercantile()
	restoreSpeechcraft()
end

return { 
	engineHandlers = { 
		onActivated = onActivated ,
	    onSave = onSave,
        onLoad = onLoad,
        onInit = onLoad,
	},
	eventHandlers = { 
		FixMerc_modStats = modStats,
		FixMerc_restoreStats = restoreStats,
		
		FixMerc_setHardcoreMercantile = setHardcoreMercantile,
		FixMerc_setMercantile = setMercantile,
		FixMerc_restoreMercantile = restoreMercantile,
		
		FixMerc_setHardcoreSpeechcraft = setHardcoreSpeechcraft,
		FixMerc_setSpeechcraft = setSpeechcraft,
		FixMerc_restoreSpeechcraft = restoreSpeechcraft,
		FixMerc_bye = bye,
	}
}