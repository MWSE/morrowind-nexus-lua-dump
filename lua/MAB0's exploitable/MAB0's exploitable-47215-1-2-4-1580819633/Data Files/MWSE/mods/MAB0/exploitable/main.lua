local this = {
  mcm = nil,
  metadataController = nil,
  magicEffectInvalidatorModule = nil
}

local function createMagicEffectInvalidator()
  this.magicEffectInvalidatorModule = require( this.metadataController.getModulePath( this.metadataController.get().modules.magicEffectInvalidator ) ).new()
end

local function appendModuleDataToMagicEffectInvalidator()
  if( this.mcm.getConfig().enableAlchemyFix == true ) then
    this.magicEffectInvalidatorModule.appendModuleData( require( this.metadataController.getModulePath( this.metadataController.get().modules.alchemy ) ) )
  end

  if( this.mcm.getConfig().enableEnchantFix == true ) then
    this.magicEffectInvalidatorModule.appendModuleData( require( this.metadataController.getModulePath( this.metadataController.get().modules.enchant ) ) )
  end

  if( this.mcm.getConfig().enableMercantileFix == true ) then
    this.magicEffectInvalidatorModule.appendModuleData( require( this.metadataController.getModulePath( this.metadataController.get().modules.mercantile ) ) )
  end

  if( this.mcm.getConfig().enableDispositionFix == true ) then
    this.magicEffectInvalidatorModule.appendModuleData( require( this.metadataController.getModulePath( this.metadataController.get().modules.disposition ) ) )
  end
end

local function ensureInitializationIsDone()
  if( this.metadataController == nil ) then
    tes3.messageBox( "Error with MAB0's exploitable mod initialization. Refer to MWSE.log" )

    return false
  end

  return true
end

local function onRegisterMcm()
  this.mcm = require( "MAB0.exploitable.mcm" ).new()
end
event.register( "modConfigReady", onRegisterMcm )

local function onInitialized()
  this.metadataController = require( "MAB0.metadataController" ).new( {
    modName = "exploitable",
    modPath = "MAB0.exploitable.",
    requires = {
      [ "MAB0.version" ] = { major = 1, minor = 0, patch = 1 }
    },
    modules = {
      alchemy = "alchemy",
      disposition = "disposition",
      enchant = "enchant",
      magicEffectInvalidator = "magicEffectInvalidator",
      mercantile = "mercantile"
    },
    eventPrefix = "MAB0.exploitable.",
    events = {
      effectActiveTimeInvalidated = "effectActiveTimeInvalidated"
    }
  } )
end
event.register( "initialized", onInitialized )

local function start()
  if( this.magicEffectInvalidatorModule ~= nil ) then return end
  if( ensureInitializationIsDone() == false ) then return end

  createMagicEffectInvalidator()
  appendModuleDataToMagicEffectInvalidator()

  this.magicEffectInvalidatorModule.start()
end
event.register( "loaded", start )

local function stop()
  if( this.magicEffectInvalidatorModule == nil ) then return end

  this.magicEffectInvalidatorModule.stop()

  this.magicEffectInvalidatorModule = nil
end
event.register( "load", stop )