local cache = {}

return {
  applyFortifyAttributeFade = function( collectedEffect )
    local magnitude = collectedEffect.value.magnitude
    local actor = collectedEffect.value.actor
    local attribute = collectedEffect.value.attribute
    actor.attributes[ attribute ].current = actor.attributes[ attribute ].current - magnitude
  end,
  revertFortifyAttributeFade = function( collectedEffect )
    local magnitude = collectedEffect.value.magnitude
    local actor = collectedEffect.value.actor
    local attribute = collectedEffect.value.attribute
    actor.attributes[ attribute ].current = actor.attributes[ attribute ].current + magnitude
  end,
  applyFortifySkillFade = function( collectedEffect )
    local magnitude = collectedEffect.value.magnitude
    local actor = collectedEffect.value.actor
    local skill = collectedEffect.value.skill
    actor.skills[ skill ].current = actor.skills[ skill ].current - magnitude
  end,
  revertFortifySkillFade = function( collectedEffect )
    local magnitude = collectedEffect.value.magnitude
    local actor = collectedEffect.value.actor
    local skill = collectedEffect.value.skill
    actor.skills[ skill ].current = actor.skills[ skill ].current + magnitude
  end,
  applyFortifyFatigueFade = function( collectedEffect )
    local magnitude = collectedEffect.value.magnitude
    local actor = collectedEffect.value.actor
    actor.fatigue.current = actor.fatigue.current - magnitude
  end,
  revertFortifyFatigueFade = function( collectedEffect )
    local magnitude = collectedEffect.value.magnitude
    local actor = collectedEffect.value.actor
    actor.fatigue.current = actor.fatigue.current + magnitude
  end,
  applyOverloadedCharmFade = function( collectedEffect )
    local serialNumber = collectedEffect.key.serialNumber
    local effectIndex = collectedEffect.key.effectIndex

    local oldDisposition = nil
    for i = #cache, 1, -1 do
      if( ( cache[ i ].serialNumber == serialNumber ) and ( cache[ i ].effectIndex == effectIndex ) ) then
        oldDisposition = cache[ i ].oldDisposition
        cache[ i ].serialNumber = -1
        cache[ i ].effectIndex = -1
        i = 1
      end
    end

    if( not oldDisposition ) then return end

    collectedEffect.value.actor.object.baseDisposition = oldDisposition
  end,
  revertOverloadedCharmFade = function( collectedEffect )
    local serialNumber = collectedEffect.key.serialNumber
    local effectIndex = collectedEffect.key.effectIndex

    for _, cacheItem in pairs( cache ) do
      if( ( cacheItem.serialNumber == serialNumber ) and ( cacheItem.effectIndex == effectIndex ) ) then
        return
      end
    end

    local oldDisposition = collectedEffect.value.actor.object.baseDisposition
    local magnitude = collectedEffect.value.magnitude
    local realDisposition = collectedEffect.value.actor.object.disposition
    local clampedValue = 100 + oldDisposition - realDisposition
    collectedEffect.value.actor.object.baseDisposition = collectedEffect.value.actor.object.baseDisposition + magnitude
    if ( collectedEffect.value.actor.object.baseDisposition > clampedValue ) then collectedEffect.value.actor.object.baseDisposition = clampedValue end

    table.insert( cache, {
      [ "serialNumber" ] = serialNumber,
      [ "effectIndex" ] = effectIndex,
      [ "oldDisposition" ] = oldDisposition
    } )
  end
}